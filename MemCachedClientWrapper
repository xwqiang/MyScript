package com.kuyun.cards.controller.util;
import java.io.IOException;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.math.NumberUtils;
import net.rubyeye.xmemcached.MemcachedClient; 
import net.rubyeye.xmemcached.MemcachedClientBuilder; 
import net.rubyeye.xmemcached.XMemcachedClientBuilder; 
import net.rubyeye.xmemcached.utils.AddrUtil; 
/**
 * MemCached工具类
 * @author peiguanghao
 *
 */
public class MemCachedClientWrapper { 
	private static MemcachedClient mcc;
	public static final int SECOND = 1;

	public static final int MINUTE = SECOND * 60;

	public static final int HOUR = SECOND * 60 * 60;

	public static final int DAY = SECOND * 60 * 60 * 24;

	public static final int WEEK = SECOND * 60 * 60 * 24 * 7;

	public static final int MONTH = SECOND * 60 * 60 * 24 * 30;
	private static boolean failover = false;
	public synchronized static void init(){
		try {
			if (null == mcc) {
				String weightList=ResourceHelper.get("memcache.weights");
				String serverList=ResourceHelper.get("memcache.servers");
				String name=ResourceHelper.get("memcache.name");
				String maxConn=ResourceHelper.get("memcache.maxConn");
				String[] tmp = StringUtils.split(weightList, ',');
				int[] weights = new int[tmp.length];
				for (int i = 0; i < tmp.length; ++i) {
					weights[i] = NumberUtils.toInt(tmp[i], 0);
				}
				MemcachedClientBuilder builder = new XMemcachedClientBuilder(AddrUtil.getAddresses(StringUtils.replace(serverList,",", " ")), weights);
				builder.setConnectionPoolSize(Integer.parseInt(maxConn));
				builder.setFailureMode(failover);
				builder.setConnectTimeout(SECOND * 5);
				builder.setName(name);
				builder.getTranscoder().setCompressionThreshold(4096);
				mcc = builder.build();
			}

		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 统一设置缓存(涉及有多套memcached的管理)
	 * @param key
	 * @param value 设置memcached的值
	 * @param expire 缓存的有效期
	 */
	public static void set(String key, Object value, int expire) {
		key = filterKey(key);
		try {
			if(mcc == null){
				init();
			}
			mcc.set(key, expire, value);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 通过key删除缓存
	 * @param key
	 */
	public static void delete(String key) {
		try {
			if(mcc == null){
				init();
			}
			key = filterKey(key);
			mcc.delete(key);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	/**
	 * 根据key获取值
	 * @param key
	 * @return
	 */
	public static Object get(String key){
		key = filterKey(key);
		if(mcc == null){
			init();
		}
		try{
			Object obj = mcc.get(key);
			return obj;
		}catch(Exception e){
			e.printStackTrace();
		}
		return null;
	}
	/**
	 * 过滤xmemcache的key中非法字符
	 * 
	 * @param key
	 * @return
	 */
	public static String filterKey(String key) {
		return key.replaceAll("\\p{Cntrl}]|\\p{Space}", "_");
	}
	public static void stop(){
		try {
			if(mcc!=null){
				mcc.shutdown();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	public static void main(String[] aa) throws InterruptedException{
	    while(true){
    	    MemCachedClientWrapper.set("abc", "aa", 1002);
    	    String s = (String) MemCachedClientWrapper.get("abc");
    	    System.out.println(s);
    	    Thread.sleep(1000*5);
	    }
	}
} 
